package com.yieldBroker.controller;

import com.yieldBroker.model.OrderBook;
import com.yieldBroker.model.OrderModel;
import com.yieldBroker.service.OrderService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;

@RestController
@RequestMapping("/market")
public class OrderBookController {

	@Autowired
	private OrderService orderService;

	/**
	 *  Generates OrderBook from existing Orders extracted from orderStore
	 *
	 *  HTTPCode: 200 (Success) / 500 (Internal Server Error)
	 *
	 * @return OrderBook
	 */
	@RequestMapping(path="/orderBook", method = RequestMethod.GET)
	public ResponseEntity<OrderBook> getOrderBook()  {

		OrderBook orderBook = orderService.getOrderBook();

		return orderBook!=null ?  ResponseEntity.ok(orderBook) :
				ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
	}

	/**
	 * place Order -> stores Order in Order table
	 * ID is auto-generated by Table
	 *
	 * HTTPCode: 200 (Success) /400 (Bad request) /500 (Internal Server Error)
	 *
	 * @param orderModel
	 * @return ResponseEntity<OrderModel>
	 */
	@RequestMapping(value = "/placeOrder", method = RequestMethod.POST)
	@ResponseBody
	public ResponseEntity<OrderModel> placeOrder(@Valid @RequestBody(required = true) OrderModel orderModel) {

		OrderModel orderModel_Response = orderService.storeOrder(orderModel);

		HttpStatus httpStatus = orderModel_Response !=null ? HttpStatus.OK : HttpStatus.INTERNAL_SERVER_ERROR;

		return  orderModel_Response !=null && orderModel_Response.getOperationSuccessful() ?
				ResponseEntity.ok(orderModel_Response) :
				ResponseEntity.status(httpStatus).build();
	}


	/**
	 * cancel Order by calling OrderService (uses clientOrderId) as key
	 *
	 * HTTPCode: 200 (Success) /400 (Bad request) /500 (Internal Server Error)
	 *
	 * @param clientOrderId
	 * @return OrderModel (contains response for action cancel Order)
	 */

	@RequestMapping(value = "/cancelOrder/{clientOrderId}", method = RequestMethod.POST)
	@ResponseBody
	@Validated
	public ResponseEntity<OrderModel> cancelOrder(@NotNull @NotBlank @Pattern(regexp = "\\d") @PathVariable String clientOrderId) {

		OrderModel orderModel_Response =  orderService.cancelOrder(new OrderModel().setClientOrderId(Integer.valueOf(clientOrderId)));

		return  orderModel_Response !=null && orderModel_Response.getOperationSuccessful() ?
				ResponseEntity.ok(orderModel_Response) :
				ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
	}
}
